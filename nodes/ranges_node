#!/usr/bin/env python3

import math

import rclpy
from geometry_msgs.msg import TransformStamped
from hippo_msgs.msg import RangeMeasurement, RangeMeasurementArray
from rclpy.node import Node
from rclpy.qos import QoSHistoryPolicy, QoSProfile, QoSReliabilityPolicy
from tf2_msgs.msg import TFMessage


def create_range_measurement(range_id: int, range: float) -> RangeMeasurement:
    msg = RangeMeasurement()
    msg.range = range
    msg.id = range_id
    return msg


class RangesNode(Node):

    def __init__(self, node_name):
        super().__init__(node_name=node_name)
        qos = QoSProfile(reliability=QoSReliabilityPolicy.BEST_EFFORT,
                         history=QoSHistoryPolicy.KEEP_LAST,
                         depth=1)

        self.tag_ids = {
            4: 0,
            5: 1,
            2: 2,
            8: 3,
        }
        self.ranges_pub = self.create_publisher(RangeMeasurementArray, 'ranges',
                                                1)

        self.tag_transforms_sub = self.create_subscription(
            TFMessage, 'front_camera/tag_transforms', self.on_tag_transforms,
            qos)

    def on_tag_transforms(self, msg: TFMessage):
        tf_stamped: TransformStamped
        range_array = RangeMeasurementArray()
        for tf_stamped in msg.transforms:
            tag_id = int(''.join(c for c in tf_stamped.child_frame_id
                                 if c.isdigit()))
            try:
                range_id = self.tag_ids[tag_id]
            except KeyError:
                self.get_logger().warn(
                    f'Tag with id {tag_id} not in tag_ids dict. Ignoring it.')
                continue
            p = tf_stamped.transform.translation
            distance = math.sqrt(p.x**2 + p.y**2 + p.z**2)

            measurement = create_range_measurement(range_id, distance)
            measurement.header = tf_stamped.header

            range_array.measurements.append(measurement)

        range_array.header.frame_id = 'range_sensor'
        range_array.header.stamp = self.get_clock().now().to_msg()
        self.ranges_pub.publish(range_array)


def main():
    rclpy.init()
    node = RangesNode("range_sensor")
    rclpy.spin(node)


if __name__ == "__main__":
    main()
